{
    "id": "fff22177-f477-4f68-a6f8-7972775cb38a",
    "data": {
        "nodes": [
            {
                "data": {
                    "description": "A component for creating prompt templates using dynamic variables.",
                    "display_name": "Prompt",
                    "id": "Prompt-Q6gRn",
                    "node": {
                        "base_classes": [
                            "Text",
                            "str",
                            "object"
                        ],
                        "beta": false,
                        "custom_fields": {
                            "template": [
                                "context",
                                "user_message"
                            ]
                        },
                        "description": "Create a prompt template with dynamic variables.",
                        "display_name": "Prompt",
                        "documentation": "",
                        "error": null,
                        "field_formatters": {},
                        "field_order": [],
                        "frozen": false,
                        "full_path": null,
                        "icon": "prompts",
                        "is_composition": null,
                        "is_input": null,
                        "is_output": null,
                        "name": "",
                        "output_types": [],
                        "outputs": [
                            {
                                "cache": true,
                                "display_name": "Prompt Message",
                                "method": "build_prompt",
                                "name": "prompt",
                                "selected": "Message",
                                "types": [
                                    "Message"
                                ],
                                "value": "__UNDEFINED__",
                                "hidden": false
                            }
                        ],
                        "template": {
                            "_type": "Component",
                            "code": {
                                "advanced": true,
                                "dynamic": true,
                                "fileTypes": [],
                                "file_path": "",
                                "info": "",
                                "list": false,
                                "load_from_db": false,
                                "multiline": true,
                                "name": "code",
                                "password": false,
                                "placeholder": "",
                                "required": true,
                                "show": true,
                                "title_case": false,
                                "type": "code",
                                "value": "from langflow.custom import Component\nfrom langflow.inputs import PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template import Output\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(\n        self,\n    ) -> Message:\n        prompt = await Message.from_template_and_variables(**self._arguments)\n        self.status = prompt.text\n        return prompt\n"
                            },
                            "context": {
                                "advanced": false,
                                "display_name": "context",
                                "dynamic": false,
                                "field_type": "str",
                                "fileTypes": [],
                                "file_path": "",
                                "info": "",
                                "input_types": [
                                    "Document",
                                    "Message",
                                    "Record",
                                    "Text"
                                ],
                                "list": false,
                                "load_from_db": false,
                                "multiline": true,
                                "name": "context",
                                "password": false,
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "type": "str",
                                "value": ""
                            },
                            "template": {
                                "advanced": false,
                                "display_name": "Template",
                                "dynamic": false,
                                "fileTypes": [],
                                "file_path": "",
                                "info": "",
                                "input_types": [
                                    "Text"
                                ],
                                "list": false,
                                "load_from_db": false,
                                "multiline": false,
                                "name": "template",
                                "password": false,
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "type": "prompt",
                                "value": "{context}\n\nUser: {user_message}\nAI: "
                            },
                            "user_message": {
                                "advanced": false,
                                "display_name": "user_message",
                                "dynamic": false,
                                "field_type": "str",
                                "fileTypes": [],
                                "file_path": "",
                                "info": "",
                                "input_types": [
                                    "Document",
                                    "Message",
                                    "Record",
                                    "Text"
                                ],
                                "list": false,
                                "load_from_db": false,
                                "multiline": true,
                                "name": "user_message",
                                "password": false,
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "type": "str",
                                "value": ""
                            }
                        }
                    },
                    "type": "Prompt"
                },
                "dragging": false,
                "height": 525,
                "id": "Prompt-Q6gRn",
                "position": {
                    "x": 1900.7563740044732,
                    "y": 755.4337191022057
                },
                "positionAbsolute": {
                    "x": 1900.7563740044732,
                    "y": 755.4337191022057
                },
                "selected": false,
                "type": "genericNode",
                "width": 384
            },
            {
                "id": "Memory-H6QVu",
                "type": "genericNode",
                "position": {
                    "x": 1258.8089948698466,
                    "y": 547.1243849102437
                },
                "data": {
                    "type": "Memory",
                    "node": {
                        "template": {
                            "_type": "Component",
                            "code": {
                                "type": "code",
                                "required": true,
                                "placeholder": "",
                                "list": false,
                                "show": true,
                                "multiline": true,
                                "value": "from langflow.custom import Component\nfrom langflow.inputs import DropdownInput, IntInput, TextInput\nfrom langflow.memory import get_messages\nfrom langflow.schema import Data\nfrom langflow.schema.message import Message\nfrom langflow.template import Output\n\n\nclass MemoryComponent(Component):\n    display_name = \"Memory\"\n    description = \"Retrieves stored chat messages.\"\n    icon = \"history\"\n\n    inputs = [\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[\"Machine\", \"User\", \"Machine and User\"],\n            value=\"Machine and User\",\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        TextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"n_messages\",\n            display_name=\"Number of Messages\",\n            value=100,\n            info=\"Number of messages to retrieve.\",\n            advanced=True,\n        ),\n        TextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"Session ID of the chat history.\",\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"order\",\n            display_name=\"Order\",\n            options=[\"Ascending\", \"Descending\"],\n            value=\"Ascending\",\n            info=\"Order of the messages.\",\n            advanced=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Message Data\", name=\"messages\", method=\"retrieve_messages\"),\n        Output(display_name=\"Parsed\", name=\"messages_text\", method=\"retrieve_messages_as_text\"),\n    ]\n\n    def retrieve_messages(self) -> Data:\n        sender = self.sender\n        sender_name = self.sender_name\n        session_id = self.session_id\n        n_messages = self.n_messages\n        order = \"DESC\" if self.order == \"Descending\" else \"ASC\"\n\n        if sender == \"Machine and User\":\n            sender = None\n\n        messages = get_messages(\n            sender=sender,\n            sender_name=sender_name,\n            session_id=session_id,\n            limit=n_messages,\n            order=order,\n        )\n        self.status = messages\n        return messages\n\n    def retrieve_messages_as_text(self) -> Message:\n        messages = self.retrieve_messages()\n        messages_text = \"\\n\".join([\"{sender_name}: {text}\".format(**message.data) for message in messages])\n        self.status = messages_text\n        return Message(text=messages_text)\n",
                                "fileTypes": [],
                                "file_path": "",
                                "password": false,
                                "name": "code",
                                "advanced": true,
                                "dynamic": true,
                                "info": "",
                                "load_from_db": false,
                                "title_case": false
                            },
                            "n_messages": {
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": 100,
                                "name": "n_messages",
                                "display_name": "Number of Messages",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Number of messages to retrieve.",
                                "title_case": false,
                                "type": "int"
                            },
                            "order": {
                                "options": [
                                    "Ascending",
                                    "Descending"
                                ],
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "Ascending",
                                "name": "order",
                                "display_name": "Order",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Order of the messages.",
                                "title_case": false,
                                "type": "str"
                            },
                            "sender": {
                                "options": [
                                    "Machine",
                                    "User",
                                    "Machine and User"
                                ],
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "Machine and User",
                                "name": "sender",
                                "display_name": "Sender Type",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Type of sender.",
                                "title_case": false,
                                "type": "str"
                            },
                            "sender_name": {
                                "multiline": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "",
                                "name": "sender_name",
                                "display_name": "Sender Name",
                                "advanced": true,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "Name of the sender.",
                                "title_case": false,
                                "type": "str"
                            },
                            "session_id": {
                                "multiline": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "",
                                "name": "session_id",
                                "display_name": "Session ID",
                                "advanced": true,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "Session ID of the chat history.",
                                "title_case": false,
                                "type": "str"
                            }
                        },
                        "description": "Retrieves stored chat messages.",
                        "icon": "history",
                        "base_classes": [
                            "Data",
                            "Message"
                        ],
                        "display_name": "Memory",
                        "documentation": "",
                        "custom_fields": {},
                        "output_types": [],
                        "pinned": false,
                        "conditional_paths": [],
                        "frozen": false,
                        "outputs": [
                            {
                                "types": [
                                    "Data"
                                ],
                                "selected": "Data",
                                "name": "messages",
                                "display_name": "Message Data",
                                "method": "retrieve_messages",
                                "value": "__UNDEFINED__",
                                "cache": true
                            },
                            {
                                "types": [
                                    "Message"
                                ],
                                "selected": "Message",
                                "name": "messages_text",
                                "display_name": "Parsed",
                                "method": "retrieve_messages_as_text",
                                "value": "__UNDEFINED__",
                                "cache": true,
                                "hidden": false
                            }
                        ],
                        "field_order": [
                            "sender",
                            "sender_name",
                            "n_messages",
                            "session_id",
                            "order"
                        ],
                        "beta": false
                    },
                    "id": "Memory-H6QVu"
                },
                "selected": false,
                "width": 384,
                "height": 267,
                "positionAbsolute": {
                    "x": 1258.8089948698466,
                    "y": 547.1243849102437
                },
                "dragging": false
            },
            {
                "id": "ChatInput-HDCD9",
                "type": "genericNode",
                "position": {
                    "x": 1246.4850995457527,
                    "y": 912.733279525042
                },
                "data": {
                    "type": "ChatInput",
                    "node": {
                        "template": {
                            "_type": "Component",
                            "files": {
                                "file_path": "",
                                "fileTypes": [
                                    "txt",
                                    "md",
                                    "mdx",
                                    "csv",
                                    "json",
                                    "yaml",
                                    "yml",
                                    "xml",
                                    "html",
                                    "htm",
                                    "pdf",
                                    "docx",
                                    "py",
                                    "sh",
                                    "sql",
                                    "js",
                                    "ts",
                                    "tsx",
                                    "jpg",
                                    "jpeg",
                                    "png",
                                    "bmp",
                                    "image"
                                ],
                                "list": true,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "",
                                "name": "files",
                                "display_name": "Files",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Files to be sent with the message.",
                                "title_case": false,
                                "type": "file"
                            },
                            "code": {
                                "type": "code",
                                "required": true,
                                "placeholder": "",
                                "list": false,
                                "show": true,
                                "multiline": true,
                                "value": "from langflow.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import DropdownInput, FileInput, TextInput\nfrom langflow.schema.message import Message\nfrom langflow.template import Output\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"ChatInput\"\n\n    inputs = [\n        TextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            multiline=True,\n            value=\"\",\n            info=\"Message to be passed as input.\",\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[\"Machine\", \"User\"],\n            value=\"User\",\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        TextInput(\n            name=\"sender_name\",\n            type=str,\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=\"User\",\n            advanced=True,\n        ),\n        TextInput(\n            name=\"session_id\", type=str, display_name=\"Session ID\", info=\"Session ID for the message.\", advanced=True\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n        )\n        if self.session_id and isinstance(message, Message) and isinstance(message.text, str):\n            self.store_message(message)\n            self.message.value = message\n\n        self.status = message\n        return message\n",
                                "fileTypes": [],
                                "file_path": "",
                                "password": false,
                                "name": "code",
                                "advanced": true,
                                "dynamic": true,
                                "info": "",
                                "load_from_db": false,
                                "title_case": false
                            },
                            "input_value": {
                                "multiline": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "",
                                "name": "input_value",
                                "display_name": "Text",
                                "advanced": false,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "Message to be passed as input.",
                                "title_case": false,
                                "type": "str"
                            },
                            "sender": {
                                "options": [
                                    "Machine",
                                    "User"
                                ],
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "User",
                                "name": "sender",
                                "display_name": "Sender Type",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Type of sender.",
                                "title_case": false,
                                "type": "str"
                            },
                            "sender_name": {
                                "multiline": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "User",
                                "name": "sender_name",
                                "display_name": "Sender Name",
                                "advanced": true,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "Name of the sender.",
                                "title_case": false,
                                "type": "str"
                            },
                            "session_id": {
                                "multiline": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "",
                                "name": "session_id",
                                "display_name": "Session ID",
                                "advanced": true,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "Session ID for the message.",
                                "title_case": false,
                                "type": "str"
                            }
                        },
                        "description": "Get chat inputs from the Playground.",
                        "icon": "ChatInput",
                        "base_classes": [
                            "Message"
                        ],
                        "display_name": "Chat Input",
                        "documentation": "",
                        "custom_fields": {},
                        "output_types": [],
                        "pinned": false,
                        "conditional_paths": [],
                        "frozen": false,
                        "outputs": [
                            {
                                "types": [
                                    "Message"
                                ],
                                "selected": "Message",
                                "name": "message",
                                "display_name": "Message",
                                "method": "message_response",
                                "value": "__UNDEFINED__",
                                "cache": true,
                                "hidden": false
                            }
                        ],
                        "field_order": [
                            "input_value",
                            "sender",
                            "sender_name",
                            "session_id",
                            "files"
                        ],
                        "beta": false
                    },
                    "id": "ChatInput-HDCD9"
                },
                "selected": false,
                "width": 384,
                "height": 309,
                "positionAbsolute": {
                    "x": 1246.4850995457527,
                    "y": 912.733279525042
                },
                "dragging": false
            },
            {
                "id": "OpenAIModel-nNBA0",
                "type": "genericNode",
                "position": {
                    "x": 2505.576405157388,
                    "y": 662.147407935124
                },
                "data": {
                    "type": "OpenAIModel",
                    "node": {
                        "template": {
                            "_type": "Component",
                            "code": {
                                "type": "code",
                                "required": true,
                                "placeholder": "",
                                "list": false,
                                "show": true,
                                "multiline": true,
                                "value": "import operator\nfrom functools import reduce\n\nfrom langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom langflow.base.constants import STREAM_INFO_TEXT\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.base.models.openai_constants import MODEL_NAMES\nfrom langflow.field_typing import BaseLanguageModel\nfrom langflow.inputs import (\n    BoolInput,\n    DictInput,\n    DropdownInput,\n    FloatInput,\n    IntInput,\n    MessageInput,\n    SecretStrInput,\n    StrInput,\n)\nfrom langflow.schema.message import Message\nfrom langflow.template import Output\n\n\nclass OpenAIModelComponent(LCModelComponent):\n    display_name = \"OpenAI\"\n    description = \"Generates text using OpenAI LLMs.\"\n    icon = \"OpenAI\"\n\n    inputs = [\n        MessageInput(name=\"input_value\", display_name=\"Input\"),\n        IntInput(\n            name=\"max_tokens\",\n            display_name=\"Max Tokens\",\n            advanced=True,\n            info=\"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n        ),\n        DictInput(name=\"model_kwargs\", display_name=\"Model Kwargs\", advanced=True),\n        DictInput(\n            name=\"output_schema\",\n            is_list=True,\n            display_name=\"Schema\",\n            advanced=True,\n            info=\"The schema for the Output of the model. You must pass the word JSON in the prompt. If left blank, JSON mode will be disabled.\",\n        ),\n        DropdownInput(\n            name=\"model_name\", display_name=\"Model Name\", advanced=False, options=MODEL_NAMES, value=MODEL_NAMES[0]\n        ),\n        StrInput(\n            name=\"openai_api_base\",\n            display_name=\"OpenAI API Base\",\n            advanced=True,\n            info=\"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.\",\n        ),\n        SecretStrInput(\n            name=\"openai_api_key\",\n            display_name=\"OpenAI API Key\",\n            info=\"The OpenAI API Key to use for the OpenAI model.\",\n            advanced=False,\n            value=\"OPENAI_API_KEY\",\n        ),\n        FloatInput(name=\"temperature\", display_name=\"Temperature\", value=0.1),\n        BoolInput(name=\"stream\", display_name=\"Stream\", info=STREAM_INFO_TEXT, advanced=True),\n        StrInput(\n            name=\"system_message\",\n            display_name=\"System Message\",\n            info=\"System message to pass to the model.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"seed\",\n            display_name=\"Seed\",\n            info=\"The seed controls the reproducibility of the job.\",\n            advanced=True,\n            value=1,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Text\", name=\"text_output\", method=\"text_response\"),\n        Output(display_name=\"Language Model\", name=\"model_output\", method=\"build_model\"),\n    ]\n\n    def text_response(self) -> Message:\n        input_value = self.input_value\n        stream = self.stream\n        system_message = self.system_message\n        output = self.build_model()\n        result = self.get_chat_result(output, stream, input_value, system_message)\n        self.status = result\n        return result\n\n    def build_model(self) -> BaseLanguageModel:\n        # self.output_schea is a list of dictionaries\n        # let's convert it to a dictionary\n        output_schema_dict = reduce(operator.ior, self.output_schema or {}, {})\n        openai_api_key = self.openai_api_key\n        temperature = self.temperature\n        model_name = self.model_name\n        max_tokens = self.max_tokens\n        model_kwargs = self.model_kwargs\n        openai_api_base = self.openai_api_base or \"https://api.openai.com/v1\"\n        json_mode = bool(output_schema_dict)\n        seed = self.seed\n        if openai_api_key:\n            api_key = SecretStr(openai_api_key)\n        else:\n            api_key = None\n        output = ChatOpenAI(\n            max_tokens=max_tokens or None,\n            model_kwargs=model_kwargs or {},\n            model=model_name or None,\n            base_url=openai_api_base,\n            api_key=api_key,\n            temperature=temperature or 0.1,\n            seed=seed,\n        )\n        if json_mode:\n            output = output.with_structured_output(schema=output_schema_dict, method=\"json_mode\")\n\n        return output\n",
                                "fileTypes": [],
                                "file_path": "",
                                "password": false,
                                "name": "code",
                                "advanced": true,
                                "dynamic": true,
                                "info": "",
                                "load_from_db": false,
                                "title_case": false
                            },
                            "input_value": {
                                "multiline": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "",
                                "name": "input_value",
                                "display_name": "Input",
                                "advanced": false,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "",
                                "title_case": false,
                                "type": "str"
                            },
                            "max_tokens": {
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "",
                                "name": "max_tokens",
                                "display_name": "Max Tokens",
                                "advanced": true,
                                "dynamic": false,
                                "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                                "title_case": false,
                                "type": "int"
                            },
                            "model_kwargs": {
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": {},
                                "name": "model_kwargs",
                                "display_name": "Model Kwargs",
                                "advanced": true,
                                "dynamic": false,
                                "info": "",
                                "title_case": false,
                                "type": "dict"
                            },
                            "model_name": {
                                "options": [
                                    "gpt-4o",
                                    "gpt-4-turbo",
                                    "gpt-4-turbo-preview",
                                    "gpt-3.5-turbo",
                                    "gpt-3.5-turbo-0125"
                                ],
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "gpt-4-turbo",
                                "name": "model_name",
                                "display_name": "Model Name",
                                "advanced": false,
                                "dynamic": false,
                                "info": "",
                                "title_case": false,
                                "type": "str"
                            },
                            "openai_api_base": {
                                "multiline": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "",
                                "name": "openai_api_base",
                                "display_name": "OpenAI API Base",
                                "advanced": true,
                                "dynamic": false,
                                "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.",
                                "title_case": false,
                                "type": "str"
                            },
                            "openai_api_key": {
                                "load_from_db": true,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "",
                                "name": "openai_api_key",
                                "display_name": "OpenAI API Key",
                                "advanced": false,
                                "input_types": [],
                                "dynamic": false,
                                "info": "The OpenAI API Key to use for the OpenAI model.",
                                "title_case": false,
                                "password": true,
                                "type": "str"
                            },
                            "output_schema": {
                                "list": true,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": {},
                                "name": "output_schema",
                                "display_name": "Schema",
                                "advanced": true,
                                "dynamic": false,
                                "info": "The schema for the Output of the model. You must pass the word JSON in the prompt. If left blank, JSON mode will be disabled.",
                                "title_case": false,
                                "type": "dict"
                            },
                            "seed": {
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": 1,
                                "name": "seed",
                                "display_name": "Seed",
                                "advanced": true,
                                "dynamic": false,
                                "info": "The seed controls the reproducibility of the job.",
                                "title_case": false,
                                "type": "int"
                            },
                            "stream": {
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": false,
                                "name": "stream",
                                "display_name": "Stream",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Stream the response from the model. Streaming works only in Chat.",
                                "title_case": false,
                                "type": "bool"
                            },
                            "system_message": {
                                "multiline": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "",
                                "name": "system_message",
                                "display_name": "System Message",
                                "advanced": true,
                                "dynamic": false,
                                "info": "System message to pass to the model.",
                                "title_case": false,
                                "type": "str"
                            },
                            "temperature": {
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": 0.1,
                                "name": "temperature",
                                "display_name": "Temperature",
                                "advanced": false,
                                "dynamic": false,
                                "info": "",
                                "title_case": false,
                                "type": "float"
                            }
                        },
                        "description": "Generates text using OpenAI LLMs.",
                        "icon": "OpenAI",
                        "base_classes": [
                            "BaseLanguageModel",
                            "Message"
                        ],
                        "display_name": "OpenAI",
                        "documentation": "",
                        "custom_fields": {},
                        "output_types": [],
                        "pinned": false,
                        "conditional_paths": [],
                        "frozen": false,
                        "outputs": [
                            {
                                "types": [
                                    "Message"
                                ],
                                "selected": "Message",
                                "name": "text_output",
                                "display_name": "Text",
                                "method": "text_response",
                                "value": "__UNDEFINED__",
                                "cache": true,
                                "hidden": false
                            },
                            {
                                "types": [
                                    "BaseLanguageModel"
                                ],
                                "selected": "BaseLanguageModel",
                                "name": "model_output",
                                "display_name": "Language Model",
                                "method": "build_model",
                                "value": "__UNDEFINED__",
                                "cache": true
                            }
                        ],
                        "field_order": [
                            "input_value",
                            "max_tokens",
                            "model_kwargs",
                            "output_schema",
                            "model_name",
                            "openai_api_base",
                            "openai_api_key",
                            "temperature",
                            "stream",
                            "system_message",
                            "seed"
                        ],
                        "beta": false
                    },
                    "id": "OpenAIModel-nNBA0"
                },
                "selected": false,
                "width": 384,
                "height": 623,
                "positionAbsolute": {
                    "x": 2505.576405157388,
                    "y": 662.147407935124
                },
                "dragging": false
            },
            {
                "id": "ChatOutput-0wtla",
                "type": "genericNode",
                "position": {
                    "x": 3129.987101578166,
                    "y": 888.0854888768531
                },
                "data": {
                    "type": "ChatOutput",
                    "node": {
                        "template": {
                            "_type": "Component",
                            "code": {
                                "type": "code",
                                "required": true,
                                "placeholder": "",
                                "list": false,
                                "show": true,
                                "multiline": true,
                                "value": "from langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import DropdownInput, TextInput\nfrom langflow.schema.message import Message\nfrom langflow.template import Output\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n\n    inputs = [\n        TextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[\"Machine\", \"User\"],\n            value=\"Machine\",\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        TextInput(name=\"sender_name\", display_name=\"Sender Name\", info=\"Name of the sender.\", value=\"AI\", advanced=True),\n        TextInput(name=\"session_id\", display_name=\"Session ID\", info=\"Session ID for the message.\", advanced=True),\n        TextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n        )\n        if self.session_id and isinstance(message, Message) and isinstance(message.text, str):\n            self.store_message(message)\n            self.message.value = message\n\n        self.status = message\n        return message\n",
                                "fileTypes": [],
                                "file_path": "",
                                "password": false,
                                "name": "code",
                                "advanced": true,
                                "dynamic": true,
                                "info": "",
                                "load_from_db": false,
                                "title_case": false
                            },
                            "data_template": {
                                "multiline": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "{text}",
                                "name": "data_template",
                                "display_name": "Data Template",
                                "advanced": true,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                                "title_case": false,
                                "type": "str"
                            },
                            "input_value": {
                                "multiline": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "",
                                "name": "input_value",
                                "display_name": "Text",
                                "advanced": false,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "Message to be passed as output.",
                                "title_case": false,
                                "type": "str"
                            },
                            "sender": {
                                "options": [
                                    "Machine",
                                    "User"
                                ],
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "Machine",
                                "name": "sender",
                                "display_name": "Sender Type",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Type of sender.",
                                "title_case": false,
                                "type": "str"
                            },
                            "sender_name": {
                                "multiline": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "AI",
                                "name": "sender_name",
                                "display_name": "Sender Name",
                                "advanced": true,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "Name of the sender.",
                                "title_case": false,
                                "type": "str"
                            },
                            "session_id": {
                                "multiline": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "",
                                "name": "session_id",
                                "display_name": "Session ID",
                                "advanced": true,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "Session ID for the message.",
                                "title_case": false,
                                "type": "str"
                            }
                        },
                        "description": "Display a chat message in the Playground.",
                        "icon": "ChatOutput",
                        "base_classes": [
                            "Message"
                        ],
                        "display_name": "Chat Output",
                        "documentation": "",
                        "custom_fields": {},
                        "output_types": [],
                        "pinned": false,
                        "conditional_paths": [],
                        "frozen": false,
                        "outputs": [
                            {
                                "types": [
                                    "Message"
                                ],
                                "selected": "Message",
                                "name": "message",
                                "display_name": "Message",
                                "method": "message_response",
                                "value": "__UNDEFINED__",
                                "cache": true
                            }
                        ],
                        "field_order": [
                            "input_value",
                            "sender",
                            "sender_name",
                            "session_id",
                            "data_template"
                        ],
                        "beta": false
                    },
                    "id": "ChatOutput-0wtla"
                },
                "selected": false,
                "width": 384,
                "height": 309,
                "positionAbsolute": {
                    "x": 3129.987101578166,
                    "y": 888.0854888768531
                },
                "dragging": false
            }
        ],
        "edges": [
            {
                "source": "Memory-H6QVu",
                "sourceHandle": "{œdataTypeœ:œMemoryœ,œidœ:œMemory-H6QVuœ,œnameœ:œmessages_textœ,œoutput_typesœ:[œMessageœ]}",
                "target": "Prompt-Q6gRn",
                "targetHandle": "{œfieldNameœ:œcontextœ,œidœ:œPrompt-Q6gRnœ,œinputTypesœ:[œDocumentœ,œMessageœ,œRecordœ,œTextœ],œtypeœ:œstrœ}",
                "data": {
                    "targetHandle": {
                        "fieldName": "context",
                        "id": "Prompt-Q6gRn",
                        "inputTypes": [
                            "Document",
                            "Message",
                            "Record",
                            "Text"
                        ],
                        "type": "str"
                    },
                    "sourceHandle": {
                        "dataType": "Memory",
                        "id": "Memory-H6QVu",
                        "name": "messages_text",
                        "output_types": [
                            "Message"
                        ]
                    }
                },
                "id": "reactflow__edge-Memory-H6QVu{œdataTypeœ:œMemoryœ,œidœ:œMemory-H6QVuœ,œnameœ:œmessages_textœ,œoutput_typesœ:[œMessageœ]}-Prompt-Q6gRn{œfieldNameœ:œcontextœ,œidœ:œPrompt-Q6gRnœ,œinputTypesœ:[œDocumentœ,œMessageœ,œRecordœ,œTextœ],œtypeœ:œstrœ}",
                "className": ""
            },
            {
                "source": "ChatInput-HDCD9",
                "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-HDCD9œ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
                "target": "Prompt-Q6gRn",
                "targetHandle": "{œfieldNameœ:œuser_messageœ,œidœ:œPrompt-Q6gRnœ,œinputTypesœ:[œDocumentœ,œMessageœ,œRecordœ,œTextœ],œtypeœ:œstrœ}",
                "data": {
                    "targetHandle": {
                        "fieldName": "user_message",
                        "id": "Prompt-Q6gRn",
                        "inputTypes": [
                            "Document",
                            "Message",
                            "Record",
                            "Text"
                        ],
                        "type": "str"
                    },
                    "sourceHandle": {
                        "dataType": "ChatInput",
                        "id": "ChatInput-HDCD9",
                        "name": "message",
                        "output_types": [
                            "Message"
                        ]
                    }
                },
                "id": "reactflow__edge-ChatInput-HDCD9{œdataTypeœ:œChatInputœ,œidœ:œChatInput-HDCD9œ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-Prompt-Q6gRn{œfieldNameœ:œuser_messageœ,œidœ:œPrompt-Q6gRnœ,œinputTypesœ:[œDocumentœ,œMessageœ,œRecordœ,œTextœ],œtypeœ:œstrœ}",
                "className": ""
            },
            {
                "source": "Prompt-Q6gRn",
                "sourceHandle": "{œdataTypeœ:œPromptœ,œidœ:œPrompt-Q6gRnœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}",
                "target": "OpenAIModel-nNBA0",
                "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-nNBA0œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
                "data": {
                    "targetHandle": {
                        "fieldName": "input_value",
                        "id": "OpenAIModel-nNBA0",
                        "inputTypes": [
                            "Message"
                        ],
                        "type": "str"
                    },
                    "sourceHandle": {
                        "dataType": "Prompt",
                        "id": "Prompt-Q6gRn",
                        "name": "prompt",
                        "output_types": [
                            "Message"
                        ]
                    }
                },
                "id": "reactflow__edge-Prompt-Q6gRn{œdataTypeœ:œPromptœ,œidœ:œPrompt-Q6gRnœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-OpenAIModel-nNBA0{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-nNBA0œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
                "className": ""
            },
            {
                "source": "OpenAIModel-nNBA0",
                "sourceHandle": "{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-nNBA0œ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}",
                "target": "ChatOutput-0wtla",
                "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-0wtlaœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
                "data": {
                    "targetHandle": {
                        "fieldName": "input_value",
                        "id": "ChatOutput-0wtla",
                        "inputTypes": [
                            "Message"
                        ],
                        "type": "str"
                    },
                    "sourceHandle": {
                        "dataType": "OpenAIModel",
                        "id": "OpenAIModel-nNBA0",
                        "name": "text_output",
                        "output_types": [
                            "Message"
                        ]
                    }
                },
                "id": "reactflow__edge-OpenAIModel-nNBA0{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-nNBA0œ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}-ChatOutput-0wtla{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-0wtlaœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
                "className": ""
            }
        ],
        "viewport": {
            "x": 0,
            "y": 0,
            "zoom": 1
        }
    },
    "description": "This project can be used as a starting point for building a Chat experience with user specific memory. You can set a different Session ID to start a new message history.",
    "name": "Memory Chatbot",
    "last_tested_version": "1.0.0a59",
    "endpoint_name": "None-3",
    "is_component": false
}