{
  "data": {
    "edges": [
      {
        "className": "stroke-gray-900 stroke-connection",
        "data": {
          "sourceHandle": {
            "dataType": "URL",
            "id": "URL-HYPkR",
            "name": "record",
            "output_types": [
              "Record"
            ]
          },
          "targetHandle": {
            "fieldName": "reference_2",
            "id": "Prompt-Rse03",
            "inputTypes": [
              "Document",
              "BaseOutputParser",
              "Record",
              "Text"
            ],
            "type": "str"
          }
        },
        "id": "reactflow__edge-URL-HYPkR{œbaseClassesœ:[œRecordœ],œdataTypeœ:œURLœ,œidœ:œURL-HYPkRœ}-Prompt-Rse03{œfieldNameœ:œreference_2œ,œidœ:œPrompt-Rse03œ,œinputTypesœ:[œDocumentœ,œBaseOutputParserœ,œRecordœ,œTextœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "URL-HYPkR",
        "sourceHandle": "{œdataTypeœ: œURLœ, œidœ: œURL-HYPkRœ, œoutput_typesœ: [œRecordœ], œnameœ: œrecordœ}",
        "style": {
          "stroke": "#555"
        },
        "target": "Prompt-Rse03",
        "targetHandle": "{œfieldNameœ: œreference_2œ, œidœ: œPrompt-Rse03œ, œinputTypesœ: [œDocumentœ, œBaseOutputParserœ, œRecordœ, œTextœ], œtypeœ: œstrœ}"
      },
      {
        "className": "stroke-gray-900 stroke-connection",
        "data": {
          "sourceHandle": {
            "dataType": "OpenAIModel",
            "id": "OpenAIModel-gi29P",
            "name": "text_output",
            "output_types": [
              "Text"
            ]
          },
          "targetHandle": {
            "fieldName": "input_value",
            "id": "ChatOutput-JPlxl",
            "inputTypes": [
              "Text"
            ],
            "type": "str"
          }
        },
        "id": "reactflow__edge-OpenAIModel-gi29P{œbaseClassesœ:[œstrœ,œTextœ,œobjectœ],œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-gi29Pœ}-ChatOutput-JPlxl{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-JPlxlœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "source": "OpenAIModel-gi29P",
        "sourceHandle": "{œdataTypeœ: œOpenAIModelœ, œidœ: œOpenAIModel-gi29Pœ, œoutput_typesœ: [œTextœ], œnameœ: œtext_outputœ}",
        "style": {
          "stroke": "#555"
        },
        "target": "ChatOutput-JPlxl",
        "targetHandle": "{œfieldNameœ: œinput_valueœ, œidœ: œChatOutput-JPlxlœ, œinputTypesœ: [œTextœ], œtypeœ: œstrœ}"
      },
      {
        "className": "stroke-gray-900 stroke-connection",
        "data": {
          "sourceHandle": {
            "dataType": "URL",
            "id": "URL-2cX90",
            "name": "record",
            "output_types": [
              "Record"
            ]
          },
          "targetHandle": {
            "fieldName": "reference_1",
            "id": "Prompt-Rse03",
            "inputTypes": [
              "Document",
              "BaseOutputParser",
              "Record",
              "Text"
            ],
            "type": "str"
          }
        },
        "id": "reactflow__edge-URL-2cX90{œbaseClassesœ:[œRecordœ],œdataTypeœ:œURLœ,œidœ:œURL-2cX90œ}-Prompt-Rse03{œfieldNameœ:œreference_1œ,œidœ:œPrompt-Rse03œ,œinputTypesœ:[œDocumentœ,œBaseOutputParserœ,œRecordœ,œTextœ],œtypeœ:œstrœ}",
        "source": "URL-2cX90",
        "sourceHandle": "{œdataTypeœ: œURLœ, œidœ: œURL-2cX90œ, œoutput_typesœ: [œRecordœ], œnameœ: œrecordœ}",
        "style": {
          "stroke": "#555"
        },
        "target": "Prompt-Rse03",
        "targetHandle": "{œfieldNameœ: œreference_1œ, œidœ: œPrompt-Rse03œ, œinputTypesœ: [œDocumentœ, œBaseOutputParserœ, œRecordœ, œTextœ], œtypeœ: œstrœ}"
      },
      {
        "className": "stroke-gray-900 stroke-connection",
        "data": {
          "sourceHandle": {
            "dataType": "TextInput",
            "id": "TextInput-og8Or",
            "name": "Text",
            "output_types": [
              "Text"
            ]
          },
          "targetHandle": {
            "fieldName": "instructions",
            "id": "Prompt-Rse03",
            "inputTypes": [
              "Document",
              "BaseOutputParser",
              "Record",
              "Text"
            ],
            "type": "str"
          }
        },
        "id": "reactflow__edge-TextInput-og8Or{œbaseClassesœ:[œobjectœ,œTextœ,œstrœ],œdataTypeœ:œTextInputœ,œidœ:œTextInput-og8Orœ}-Prompt-Rse03{œfieldNameœ:œinstructionsœ,œidœ:œPrompt-Rse03œ,œinputTypesœ:[œDocumentœ,œBaseOutputParserœ,œRecordœ,œTextœ],œtypeœ:œstrœ}",
        "source": "TextInput-og8Or",
        "sourceHandle": "{œdataTypeœ: œTextInputœ, œidœ: œTextInput-og8Orœ, œoutput_typesœ: [œTextœ], œnameœ: œTextœ}",
        "style": {
          "stroke": "#555"
        },
        "target": "Prompt-Rse03",
        "targetHandle": "{œfieldNameœ: œinstructionsœ, œidœ: œPrompt-Rse03œ, œinputTypesœ: [œDocumentœ, œBaseOutputParserœ, œRecordœ, œTextœ], œtypeœ: œstrœ}"
      },
      {
        "className": "stroke-gray-900 stroke-connection",
        "data": {
          "sourceHandle": {
            "dataType": "Prompt",
            "id": "Prompt-Rse03",
            "name": "prompt",
            "output_types": [
              "Prompt"
            ]
          },
          "targetHandle": {
            "fieldName": "input_value",
            "id": "OpenAIModel-gi29P",
            "inputTypes": [
              "Text",
              "Record",
              "Prompt"
            ],
            "type": "str"
          }
        },
        "id": "reactflow__edge-Prompt-Rse03{œbaseClassesœ:[œobjectœ,œTextœ,œstrœ],œdataTypeœ:œPromptœ,œidœ:œPrompt-Rse03œ}-OpenAIModel-gi29P{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-gi29Pœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "Prompt-Rse03",
        "sourceHandle": "{œdataTypeœ: œPromptœ, œidœ: œPrompt-Rse03œ, œoutput_typesœ: [œPromptœ], œnameœ: œpromptœ}",
        "style": {
          "stroke": "#555"
        },
        "target": "OpenAIModel-gi29P",
        "targetHandle": "{œfieldNameœ: œinput_valueœ, œidœ: œOpenAIModel-gi29Pœ, œinputTypesœ: [œTextœ, œRecordœ, œPromptœ], œtypeœ: œstrœ}"
      }
    ],
    "nodes": [
      {
        "data": {
          "description": "Create a prompt template with dynamic variables.",
          "display_name": "Prompt",
          "id": "Prompt-Rse03",
          "node": {
            "base_classes": [
              "object",
              "Text",
              "str"
            ],
            "beta": false,
            "custom_fields": {
              "template": [
                "reference_1",
                "reference_2",
                "instructions"
              ]
            },
            "description": "Create a prompt template with dynamic variables.",
            "display_name": "Prompt",
            "documentation": "",
            "error": null,
            "field_formatters": {},
            "field_order": [],
            "frozen": false,
            "full_path": null,
            "icon": "prompts",
            "is_composition": null,
            "is_input": null,
            "is_output": null,
            "name": "",
            "output_types": [],
            "outputs": [
              {
                "cache": true,
                "display_name": "Prompt",
                "method": "build_prompt",
                "name": "prompt",
                "selected": "Prompt",
                "types": [
                  "Prompt"
                ],
                "value": "__UNDEFINED__"
              },
              {
                "cache": true,
                "display_name": "Text",
                "method": "format_prompt",
                "name": "text",
                "selected": "Text",
                "types": [
                  "Text"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.custom import Component\nfrom langflow.field_typing import Input, Output\nfrom langflow.field_typing.prompt import Prompt\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n\n    inputs = [\n        Input(name=\"template\", field_type=Prompt, display_name=\"Template\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt\", name=\"prompt\", method=\"build_prompt\"),\n        Output(display_name=\"Text\", name=\"text\", method=\"format_prompt\"),\n    ]\n\n    async def format_prompt(self) -> str:\n        prompt = await self.build_prompt()\n        formatted_text = prompt.format_text()\n        self.status = formatted_text\n        return formatted_text\n\n    async def build_prompt(\n        self,\n    ) -> Prompt:\n        kwargs = {k: v for k, v in self._arguments.items() if k != \"template\"}\n        prompt = await Prompt.from_template_and_variables(self.template, kwargs)\n        self.status = prompt.format_text()\n        return prompt\n"
              },
              "instructions": {
                "advanced": false,
                "display_name": "instructions",
                "dynamic": false,
                "field_type": "str",
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Document",
                  "BaseOutputParser",
                  "Record",
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "instructions",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "reference_1": {
                "advanced": false,
                "display_name": "reference_1",
                "dynamic": false,
                "field_type": "str",
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Document",
                  "BaseOutputParser",
                  "Record",
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "reference_1",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "reference_2": {
                "advanced": false,
                "display_name": "reference_2",
                "dynamic": false,
                "field_type": "str",
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Document",
                  "BaseOutputParser",
                  "Record",
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "reference_2",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "template": {
                "advanced": false,
                "display_name": "Template",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "template",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "prompt",
                "value": "Reference 1:\n\n{reference_1}\n\n---\n\nReference 2:\n\n{reference_2}\n\n---\n\n{instructions}\n\nBlog: \n\n\n"
              }
            }
          },
          "type": "Prompt"
        },
        "dragging": false,
        "height": 571,
        "id": "Prompt-Rse03",
        "position": {
          "x": 1331.381712783371,
          "y": 535.0279854229713
        },
        "positionAbsolute": {
          "x": 1331.381712783371,
          "y": 535.0279854229713
        },
        "selected": false,
        "type": "genericNode",
        "width": 384
      },
      {
        "data": {
          "id": "URL-HYPkR",
          "node": {
            "base_classes": [
              "Record"
            ],
            "beta": false,
            "custom_fields": {
              "urls": null
            },
            "description": "Fetch content from one or more URLs.",
            "display_name": "URL",
            "documentation": "",
            "field_formatters": {},
            "field_order": [],
            "frozen": false,
            "icon": "layout-template",
            "output_types": [
              "Record"
            ],
            "outputs": [
              {
                "cache": true,
                "display_name": "Record",
                "method": null,
                "name": "record",
                "selected": "Record",
                "types": [
                  "Record"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "template": {
              "_type": "CustomComponent",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from typing import Any, Dict\n\nfrom langchain_community.document_loaders.web_base import WebBaseLoader\n\nfrom langflow.custom import CustomComponent\nfrom langflow.schema import Record\n\n\nclass URLComponent(CustomComponent):\n    display_name = \"URL\"\n    description = \"Fetch content from one or more URLs.\"\n    icon = \"layout-template\"\n\n    def build_config(self) -> Dict[str, Any]:\n        return {\n            \"urls\": {\"display_name\": \"URL\"},\n        }\n\n    def build(\n        self,\n        urls: list[str],\n    ) -> list[Record]:\n        loader = WebBaseLoader(web_paths=[url for url in urls if url])\n        docs = loader.load()\n        records = self.to_records(docs)\n        self.status = records\n        return records\n"
              },
              "urls": {
                "advanced": false,
                "display_name": "URL",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Text"
                ],
                "list": true,
                "load_from_db": false,
                "multiline": false,
                "name": "urls",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": [
                  "https://www.promptingguide.ai/techniques/prompt_chaining"
                ]
              }
            }
          },
          "type": "URL"
        },
        "dragging": false,
        "height": 281,
        "id": "URL-HYPkR",
        "position": {
          "x": 568.2971412887712,
          "y": 700.9983368007821
        },
        "positionAbsolute": {
          "x": 568.2971412887712,
          "y": 700.9983368007821
        },
        "selected": false,
        "type": "genericNode",
        "width": 384
      },
      {
        "data": {
          "id": "ChatOutput-JPlxl",
          "node": {
            "base_classes": [
              "Text",
              "Record",
              "object",
              "str"
            ],
            "beta": false,
            "custom_fields": {
              "input_value": null,
              "record_template": null,
              "return_record": null,
              "sender": null,
              "sender_name": null,
              "session_id": null
            },
            "description": "Display a chat message in the Playground.",
            "display_name": "Chat Output",
            "documentation": "",
            "field_formatters": {},
            "field_order": [],
            "frozen": false,
            "icon": "ChatOutput",
            "output_types": [],
            "outputs": [
              {
                "cache": true,
                "display_name": "Text",
                "method": "text_response",
                "name": "text",
                "selected": "Text",
                "types": [
                  "Text"
                ],
                "value": "__UNDEFINED__"
              },
              {
                "cache": true,
                "display_name": "Message",
                "method": "message_response",
                "name": "message",
                "selected": "Message",
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.base.io.chat import ChatComponent\nfrom langflow.field_typing import Text\nfrom langflow.schema.message import Message\nfrom langflow.template import Input, Output\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n\n    inputs = [\n        Input(\n            name=\"input_value\", type=str, display_name=\"Text\", multiline=True, info=\"Message to be passed as output.\"\n        ),\n        Input(\n            name=\"sender\",\n            type=str,\n            display_name=\"Sender Type\",\n            options=[\"Machine\", \"User\"],\n            value=\"Machine\",\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        Input(name=\"sender_name\", type=str, display_name=\"Sender Name\", info=\"Name of the sender.\", value=\"AI\"),\n        Input(\n            name=\"session_id\", type=str, display_name=\"Session ID\", info=\"Session ID for the message.\", advanced=True\n        ),\n        Input(\n            name=\"record_template\",\n            type=str,\n            display_name=\"Record Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"text_response\"),\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def text_response(self) -> Text:\n        result = self.input_value\n        if self.session_id:\n            self.message_response()\n        self.status = result\n        return result\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n        )\n        if self.session_id and isinstance(message, Message) and isinstance(message.text, str):\n            self.store_message(message)\n        self.status = message\n        return message\n"
              },
              "input_value": {
                "advanced": false,
                "display_name": "Text",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "Message to be passed as output.",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "input_value",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "record_template": {
                "advanced": true,
                "display_name": "Record Template",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "record_template",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "sender": {
                "advanced": true,
                "display_name": "Sender Type",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "Type of sender.",
                "input_types": [
                  "Text"
                ],
                "list": true,
                "load_from_db": false,
                "multiline": false,
                "name": "sender",
                "options": [
                  "Machine",
                  "User"
                ],
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "sender_name": {
                "advanced": false,
                "display_name": "Sender Name",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "Name of the sender.",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "sender_name",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "session_id": {
                "advanced": true,
                "display_name": "Session ID",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "Session ID for the message.",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "session_id",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              }
            }
          },
          "type": "ChatOutput"
        },
        "height": 383,
        "id": "ChatOutput-JPlxl",
        "position": {
          "x": 2503.8617424688505,
          "y": 789.3005578928434
        },
        "selected": false,
        "type": "genericNode",
        "width": 384
      },
      {
        "data": {
          "id": "OpenAIModel-gi29P",
          "node": {
            "base_classes": [
              "str",
              "Text",
              "object"
            ],
            "beta": false,
            "custom_fields": {
              "input_value": null,
              "max_tokens": null,
              "model_kwargs": null,
              "model_name": null,
              "openai_api_base": null,
              "openai_api_key": null,
              "stream": null,
              "system_message": null,
              "temperature": null
            },
            "description": "Generates text using OpenAI LLMs.",
            "display_name": "OpenAI",
            "documentation": "",
            "field_formatters": {},
            "field_order": [
              "max_tokens",
              "model_kwargs",
              "model_name",
              "openai_api_base",
              "openai_api_key",
              "temperature",
              "input_value",
              "system_message",
              "stream"
            ],
            "frozen": false,
            "icon": "OpenAI",
            "output_types": [],
            "outputs": [
              {
                "cache": true,
                "display_name": "Text",
                "method": "text_response",
                "name": "text_output",
                "selected": "Text",
                "types": [
                  "Text"
                ],
                "value": "__UNDEFINED__"
              },
              {
                "cache": true,
                "display_name": "Language Model",
                "method": "build_model",
                "name": "model_output",
                "selected": "BaseLanguageModel",
                "types": [
                  "BaseLanguageModel"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom langflow.base.constants import STREAM_INFO_TEXT\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.base.models.openai_constants import MODEL_NAMES\nfrom langflow.field_typing import BaseLanguageModel, Text\nfrom langflow.inputs import BoolInput, DictInput, DropdownInput, FloatInput, SecretStrInput, StrInput\nfrom langflow.inputs.inputs import IntInput\nfrom langflow.template import Output\n\n\nclass OpenAIModelComponent(LCModelComponent):\n    display_name = \"OpenAI\"\n    description = \"Generates text using OpenAI LLMs.\"\n    icon = \"OpenAI\"\n\n    inputs = [\n        StrInput(name=\"input_value\", display_name=\"Input\", input_types=[\"Text\", \"Record\", \"Prompt\"]),\n        IntInput(\n            name=\"max_tokens\",\n            display_name=\"Max Tokens\",\n            advanced=True,\n            info=\"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n        ),\n        DictInput(name=\"model_kwargs\", display_name=\"Model Kwargs\", advanced=True),\n        DropdownInput(\n            name=\"model_name\", display_name=\"Model Name\", advanced=False, options=MODEL_NAMES, value=MODEL_NAMES[0]\n        ),\n        StrInput(\n            name=\"openai_api_base\",\n            display_name=\"OpenAI API Base\",\n            advanced=True,\n            info=\"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\\n\\nYou can change this to use other APIs like JinaChat, LocalAI and Prem.\",\n        ),\n        SecretStrInput(\n            name=\"openai_api_key\",\n            display_name=\"OpenAI API Key\",\n            info=\"The OpenAI API Key to use for the OpenAI model.\",\n            advanced=False,\n            value=\"OPENAI_API_KEY\",\n        ),\n        FloatInput(name=\"temperature\", display_name=\"Temperature\", value=0.1),\n        BoolInput(name=\"stream\", display_name=\"Stream\", info=STREAM_INFO_TEXT, advanced=True),\n        StrInput(\n            name=\"system_message\",\n            display_name=\"System Message\",\n            info=\"System message to pass to the model.\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Text\", name=\"text_output\", method=\"text_response\"),\n        Output(display_name=\"Language Model\", name=\"model_output\", method=\"build_model\"),\n    ]\n\n    def text_response(self) -> Text:\n        input_value = self.input_value\n        stream = self.stream\n        system_message = self.system_message\n        output = self.build_model()\n        result = self.get_chat_result(output, stream, input_value, system_message)\n        self.status = result\n        return result\n\n    def build_model(self) -> BaseLanguageModel:\n        openai_api_key = self.openai_api_key\n        temperature = self.temperature\n        model_name = self.model_name\n        max_tokens = self.max_tokens\n        model_kwargs = self.model_kwargs\n        openai_api_base = self.openai_api_base or \"https://api.openai.com/v1\"\n\n        if openai_api_key:\n            api_key = SecretStr(openai_api_key)\n        else:\n            api_key = None\n\n        output = ChatOpenAI(\n            max_tokens=max_tokens or None,\n            model_kwargs=model_kwargs or {},\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=api_key,\n            temperature=temperature,\n        )\n        return output\n"
              },
              "input_value": {
                "advanced": false,
                "display_name": "Input",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Text",
                  "Record",
                  "Prompt"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "input_value",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "max_tokens": {
                "advanced": true,
                "display_name": "Max Tokens",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "max_tokens",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "model_kwargs": {
                "advanced": true,
                "display_name": "Model Kwargs",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "model_kwargs",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "model_name": {
                "advanced": false,
                "display_name": "Model Name",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Text"
                ],
                "list": true,
                "load_from_db": false,
                "multiline": false,
                "name": "model_name",
                "options": [
                  "gpt-4o",
                  "gpt-4-turbo",
                  "gpt-4-turbo-preview",
                  "gpt-3.5-turbo",
                  "gpt-3.5-turbo-0125"
                ],
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "openai_api_base": {
                "advanced": true,
                "display_name": "OpenAI API Base",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\n\nYou can change this to use other APIs like JinaChat, LocalAI and Prem.",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "openai_api_base",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "openai_api_key": {
                "advanced": false,
                "display_name": "OpenAI API Key",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "The OpenAI API Key to use for the OpenAI model.",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "openai_api_key",
                "password": true,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "stream": {
                "advanced": true,
                "display_name": "Stream",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "Stream the response from the model. Streaming works only in Chat.",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "stream",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "system_message": {
                "advanced": true,
                "display_name": "System Message",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "System message to pass to the model.",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "system_message",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "temperature": {
                "advanced": false,
                "display_name": "Temperature",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "temperature",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              }
            }
          },
          "type": "OpenAIModel"
        },
        "dragging": false,
        "height": 563,
        "id": "OpenAIModel-gi29P",
        "position": {
          "x": 1917.7089968570963,
          "y": 575.9186499244129
        },
        "positionAbsolute": {
          "x": 1917.7089968570963,
          "y": 575.9186499244129
        },
        "selected": false,
        "type": "genericNode",
        "width": 384
      },
      {
        "data": {
          "id": "URL-2cX90",
          "node": {
            "base_classes": [
              "Record"
            ],
            "beta": false,
            "custom_fields": {
              "urls": null
            },
            "description": "Fetch content from one or more URLs.",
            "display_name": "URL",
            "documentation": "",
            "field_formatters": {},
            "field_order": [],
            "frozen": false,
            "icon": "layout-template",
            "output_types": [
              "Record"
            ],
            "outputs": [
              {
                "cache": true,
                "display_name": "Record",
                "method": null,
                "name": "record",
                "selected": "Record",
                "types": [
                  "Record"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "template": {
              "_type": "CustomComponent",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from typing import Any, Dict\n\nfrom langchain_community.document_loaders.web_base import WebBaseLoader\n\nfrom langflow.custom import CustomComponent\nfrom langflow.schema import Record\n\n\nclass URLComponent(CustomComponent):\n    display_name = \"URL\"\n    description = \"Fetch content from one or more URLs.\"\n    icon = \"layout-template\"\n\n    def build_config(self) -> Dict[str, Any]:\n        return {\n            \"urls\": {\"display_name\": \"URL\"},\n        }\n\n    def build(\n        self,\n        urls: list[str],\n    ) -> list[Record]:\n        loader = WebBaseLoader(web_paths=[url for url in urls if url])\n        docs = loader.load()\n        records = self.to_records(docs)\n        self.status = records\n        return records\n"
              },
              "urls": {
                "advanced": false,
                "display_name": "URL",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Text"
                ],
                "list": true,
                "load_from_db": false,
                "multiline": false,
                "name": "urls",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": [
                  "https://www.promptingguide.ai/introduction/basics"
                ]
              }
            }
          },
          "type": "URL"
        },
        "dragging": false,
        "height": 281,
        "id": "URL-2cX90",
        "position": {
          "x": 573.961301764604,
          "y": 336.41463436122086
        },
        "positionAbsolute": {
          "x": 573.961301764604,
          "y": 336.41463436122086
        },
        "selected": false,
        "type": "genericNode",
        "width": 384
      },
      {
        "data": {
          "id": "TextInput-og8Or",
          "node": {
            "base_classes": [
              "object",
              "Text",
              "str"
            ],
            "beta": false,
            "custom_fields": {
              "input_value": null,
              "record_template": null
            },
            "description": "Get text inputs from the Playground.",
            "display_name": "Instructions",
            "documentation": "",
            "field_formatters": {},
            "field_order": [],
            "frozen": false,
            "icon": "type",
            "output_types": [
              "Text"
            ],
            "outputs": [
              {
                "name": "Text",
                "selected": "Text",
                "types": [
                  "Text"
                ]
              }
            ],
            "template": {
              "_type": "CustomComponent",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from typing import Optional\n\nfrom langflow.base.io.text import TextComponent\nfrom langflow.field_typing import Text\n\n\nclass TextInput(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n\n    def build_config(self):\n        return {\n            \"input_value\": {\n                \"display_name\": \"Value\",\n                \"input_types\": [\"Record\", \"Text\"],\n                \"info\": \"Text or Record to be passed as input.\",\n            },\n            \"record_template\": {\n                \"display_name\": \"Record Template\",\n                \"multiline\": True,\n                \"info\": \"Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        input_value: Optional[str] = \"\",\n        record_template: Optional[str] = \"\",\n    ) -> Text:\n        return super().build(input_value=input_value, record_template=record_template)\n"
              },
              "input_value": {
                "advanced": false,
                "display_name": "Value",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "Text or Record to be passed as input.",
                "input_types": [
                  "Record",
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "input_value",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": "Use the references above for style to write a new blog/tutorial about prompt engineering techniques. Suggest non-covered topics."
              },
              "record_template": {
                "advanced": true,
                "display_name": "Record Template",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "record_template",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              }
            }
          },
          "type": "TextInput"
        },
        "dragging": false,
        "height": 289,
        "id": "TextInput-og8Or",
        "position": {
          "x": 569.9387927203336,
          "y": 1095.3352160671316
        },
        "positionAbsolute": {
          "x": 569.9387927203336,
          "y": 1095.3352160671316
        },
        "selected": false,
        "type": "genericNode",
        "width": 384
      }
    ],
    "viewport": {
      "x": -214.14726025721177,
      "y": -35.83855793844168,
      "zoom": 0.47344308394045925
    }
  },
  "description": "This flow can be used to create a blog post following instructions from the user, using two other blogs as reference.",
  "id": "6ad5559d-fb66-4fdc-8f98-96f4ac12799d",
  "is_component": false,
  "last_tested_version": "1.0.0a0",
  "name": "Blog Writer"
}